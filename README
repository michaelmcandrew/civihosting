Long term aim is to 'open source the CiviCRM hosting community' i.e. provide a way to share a standard server set up and easily share improvements to that set up.  This is likely to involve such cool tools as chef/puppet.

While this is brewing, these scripts and this documentation will begin to outline the standards and processes involved in setting up and maintaining clients.

Who is this for?

This set up should be useful for a CiviCRM focused development organisation needing infrastructure to host multiple Drupal and CiviCRM installations for multiple clients that wants to work in partnership with others in the CiviCRM community.

What are the priorities?

For clients
* work easily with more than one developer
* be able to move easily between hosts
* have access to historical backups
* reliable and secure hosting
* minimal technical exposure
 
How to we get there?
* popular software choices (all in ubuntu repos) and apache, not LightTPD, etc.
* hardware configuration management

What is the standard setup?

=NAMING CONVENTIONS=

Each client has a short client name [a-z]*

=SERVERS=

Production server (contains all clients)
Backup server (using different cloud provider)
Dev server ()
Client access server ()
Monitoring server ()
=LAMP STACK=

Software and services running on production server
Apache
MySQL on Ubuntu running on AWS (though it would work fine on another cloud provider)
Postfix

Backups to Rackspace cloud (though it would work fine on another cloud provider)
Munin provides monitoring

=CLIENTS DATABASE=

Tracks all info about clients, including

=CLIENT SET UP=

Each client
* served from /var/ww/[clientname]
* has a mysql user and password of [clientname]
* A virtual host config
* has local version of code stored and symlinked from /clients/[clientname]

=DATABASE=

Drupal and CiviCRM stored in seperate databases

=CODEBASE AND VERSON CONTROL=

All custom code stored on github in a repository that looks like this

php/CRM # for custom CiviCRM code
templates/CRM # for custom 
modules/ # for any modules that the site uses (including CiviCRM and any custom written modules)
themes/ # for any site themes

Currently the Drupal core code isn't put in a repo.  This is partly to avoid any settings.php or civicrm.settings.php and sites/default/files accidently going into a public repo

=BACKUP=

